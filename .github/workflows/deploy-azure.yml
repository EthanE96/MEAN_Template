name: Publish Docker Image to GHCR

on:
  push:
    branches:
      - main
    paths:
      - "api/**"

  # Allow manual trigger
  workflow_dispatch:

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ toLower(github.repository_owner) }}/mean-api
  AZURE_CONTAINER_APP_NAME_STAGE: mean-api-stage
  AZURE_CONTAINER_APP_NAME_PROD: mean-api-prod
  AZURE_RESOURCE_GROUP: Mean_Template

jobs:
  # Build and push Docker image to GHCR
  build-and-push-docker-image:
    name: Build and Publish Image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      attestations: write
      id-token: write

    # Output the version to be used by subsequent jobs
    outputs:
      image_tag: ${{ steps.get_version.outputs.VERSION }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Read version from version file
        id: get_version
        run: echo "VERSION=$(cat api/version)" >> "$GITHUB_OUTPUT"

      - name: Log in to the Github Container registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=raw,value=latest
            type=raw,value=${{ steps.get_version.outputs.VERSION }}
          labels: |
            org.opencontainers.image.version=${{ steps.get_version.outputs.VERSION }}

      - name: Build and push Docker image
        id: push
        uses: docker/build-push-action@v5
        with:
          context: ./api
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}

      - name: Generate artifact attestation
        uses: actions/attest-build-provenance@v2
        with:
          subject-name: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME}}
          subject-digest: ${{ steps.push.outputs.digest }}
          push-to-registry: true

  # Deploy Stage to Azure Container Apps
  deploy-stage:
    name: Deploy Stage
    runs-on: ubuntu-latest
    needs: build-and-push-docker-image
    permissions:
      id-token: write
      contents: read
    environment:
      name: Staging

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.MEANAPISTAGE_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.MEANAPISTAGE_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.MEANAPISTAGE_AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container App (Stage)
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.AZURE_CONTAINER_APP_NAME_STAGE }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push-docker-image.outputs.image_tag }}
          appSourcePath: "./api"

  # Deploy Production to Azure Container Apps
  deploy-production:
    name: Deploy Production
    runs-on: ubuntu-latest
    needs: deploy-stage
    permissions:
      id-token: write
      contents: read
    environment:
      name: Production

    if: success()

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Log in to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.MEANAPISTAGE_AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.MEANAPISTAGE_AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.MEANAPISTAGE_AZURE_SUBSCRIPTION_ID }}

      - name: Deploy to Azure Container App (Production)
        uses: azure/container-apps-deploy-action@v2
        with:
          containerAppName: ${{ env.AZURE_CONTAINER_APP_NAME_PROD }}
          resourceGroup: ${{ env.AZURE_RESOURCE_GROUP }}
          imageToDeploy: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:${{ needs.build-and-push-docker-image.outputs.image_tag }}
          appSourcePath: "./api"
